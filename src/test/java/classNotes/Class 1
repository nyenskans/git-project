                                Git & GitHub

Review

1.What is Git?
It is a version control tool

2.What is a local repository?
A storage on our local machine

3.What is a remote repository?
Storage on the internet (on remote server) - GitHub

4.Architecture of Git:
Stage architecture --> Working Directory; Staging area, Repository

Working Directory --> current project

5.Where should you create your local repository?
Ideally you should create your repo inside your working directory (your project)


* One repository is required for each project


        -- Git commands --

 - pwd - shows current location
 - ls - shows directories within the current location
 - cd 'directory name' - navigate to a specific directory
 - git init - initializes an empty local repository
 - git status - shows the status of all files (whether they are tracked (moved to staging area) to be committed or not)
 - --> tracked are green, untracked are red
 - git add . - add all untracked files to the staging area
 - git add 'fileName' - add a specific file to the staging area
 - git rm --cached <fileName>... to unstage files
   (delete only from staging area, not from working directory or local repo)
 - git rm --cached <folderName> -r  - to unstage a folder
 - git ls-files - to view files in the staging area
 - git log - show all commits (with the name, author, date)
 - clear - delete all lines from terminal - stays in same location
 - git restore . - restores files deleted from the working directory (restores the last copy from staging area to WD)
 - git diff - shows the difference between files in staging area and WD
  (shows all the modified/deleted lines in all the different files)
 - git diff --staged  -> shows the difference between the files in Staging area and in repo
 (press Q after this to reset Terminal for next command )


* Project --> right click --> Open in --> Terminal
* Click on Terminal in the bottom left of console
* Navigate to Project in Finder --> right click --> New Terminal at Folder


Tracking a new project using git:

1. Determine what is the location where a repository should be created and navigate to that directory in terminal

2. git init --> to initialize an empty local repository

* to delete a local repo, delete a hidden .git folder in the project folder (command+shift+. to show hidden files)

3. git add . --> add all files to the Staging area to track them to be committed
** we don't have to commit all the changes into the repository right away. We can keep them in staging area,
make additional changes and only then commit them
(Note - in this case, those changes will override the tracked files in staging area)

4. git commit -m "name that is related to the code we're working on"
--> the files we committed are copied from the staging area to the local repo
-- they contain a name, date, author, and the code

** at this point, git status command will show 'On branch master nothing to commit, working tree clean'
--> no files changed, no files in the staging area
-- > all three stages are synchronized


         * The gitignore file *
 -System specific files should not be include in our repository, so we should ignore them
 - git ignore -> specifies intentionally untracked files that Git should ignore. Files already tracked by Git are
  not affected
  1. create .gitingnore file --> touch .gitignore command
  2. add the name of the file (and extension) to the .gitignore file
  * to ignore a whole folder type nameOfTheFolder/


    * To connect the local and remote repository *

    1. Create a remote repository in Github

    2. Establish a connection between local and remote using command:
        git remote add origin https://github.com/nyenskans/git-project.git

    3. Check if conection has been established:
        git remote -v --> (the output should match the url we passed if the connection was successfully established)
     * To delete the connection - git remote remove origin
     * To check if it has been deleted - git remote -v

     4. To name the branch :
        git branch -M main

     5. To push the local repository to remote:
        first time: git push -u main
        after first time: git push

        * All commits from the local repository will be copied to the remote one
        ** In github : browse repository at this point in history



        Git cloning

     Two methods to get code from GItHub:
     1. download code as zip file
     - it only contains the latest commit, not the entire history;
     - we cannot push to that repo afterwards, because the commit history does not match
     2.
  Git clone helps us get the code from the remote repositories on our computer